{"name":"Xoverridefilter","tagline":"Implement your eZ Publish business logic in php class.","body":"X Override Filter\r\n=================\r\n\r\nIntroduction\r\n-----------\r\nWith this simple extension, you can define your business logic(a php class) with template override in override.ini, so business logic can be **easily and clearly** done in a pure php class instead of custom operator, complicated templating, or datatype.\r\n\r\nSmall example:\r\n\r\nDefinition in override.ini\r\n\r\n    [myform_view]\r\n    Source=node/view/full.tpl\r\n    MatchFile=form.tpl\r\n    Subdir=templates\r\n    Match[class_identifier]=myform\r\n    #Class is new :)\r\n    Class=myFormView\r\n\r\nImplementation in class myFormView\r\n\r\n    class myFormView implements xNodeviewRender\r\n    {\r\n      function initNodeview( $module, $node, $tpl, $viewMode )\r\n      {\r\n        //implement business logic, set template variable\r\n      }\r\n    }\r\n\r\nEnhanced override.ini\r\n---------------------\r\nEnhanced override.ini supports\r\n\r\n1. Class tag to identify a php class implenetation of the logic.\r\n2. Match[node], Match[class_identifer], Match[viewmode] for view logic conditions\r\n\r\nThe 2 above can be combined with existing template override.\r\n\r\nRequirements\r\n---------\r\n\r\n- For eZ Publish 5.2: it works well\r\n\r\n- For eZ Publish 4.2 - 5.1: it needs a kernel patch(not an unauthorized hack, but a feature backport). see doc/patches/event-pre_rending-*.diff\r\n\r\n\r\nInstall\r\n--------\r\n1. Copy this extension under \\<ezp_root\\>/extension\r\n2. If your eZ Publish is \\<5.2 (e.g. 4.7), run these commands under \\<ezp_root\\>\r\n   \r\n         cp extension/xoverridefilter/doc/patches/event-pre_rending-4.5-4.7.diff ./\r\n         patch -p0 < event-pre_rending-4.5-4.7.diff --dry-run\r\n         patch -p0 < event-pre_rending-4.5-4.7.diff\r\n       \r\n    P.S. For community versioning, 4.5-4.7 = community 2011.5-2012.5 \r\n2. Activate extension xoverridefilter\r\n3. Clear ini cache\r\n4. Regenerate autoload array\r\n\r\n\r\nExample(See doc/example for code)\r\n---------\r\n\r\n\r\n1. Configure condition and class under myextension\r\n\r\n   **Scenario 1 - Custom view logic** \r\n  \r\n   extension/myextension/settings/override.ini.append.php.\r\n\r\n        [myform_view]\r\n        Match[class_identifier]=myform\r\n        Class=myFormView\r\n     \r\n   The configuration above means that ‘myform’ objects will use myFormView for view logic. Form templates can be defined in additional template override rules.\r\n\r\n   **Scenario 2 - Custom view logic with custom template**. You can also combine view logic with template override in one override rule. \r\n\r\n        [myform_view_2]\r\n        Source=node/view/full.tpl\r\n        MatchFile=form.tpl\r\n        Subdir=templates\r\n        Match[class_identifier]=myform\r\n        #Condition section_identifier will be ignored by custom view logic.\r\n        Match[section_identifier]=standard\r\n        Class=myFormView\r\n\r\n   The configuration above means that, 'myform' objects under Standard section will use class myFormView as view logic and form.tpl as template; while 'myform' objects under other sections will use myFormView as view logic and full.tpl(if no other override rule applies) as template.\r\n\r\n\r\n2. Implement template form.tpl\r\n\r\n    extension/myextension/design/standard/override/templates/form.tpl\r\n\r\n        {if is_set( $result )}\r\n        <div>{$result}</div>\r\n        {/if}\r\n        <form action=\"\" method=\"post\">\r\n            <div>\r\n                {\"Name:\"|i8n('example')} <input type=\"text\" name=\"name\" value=\"\" />\r\n            </div>\r\n            <div>\r\n                {\"Email:\"|i18n('example')} <input type=\"text\" name=\"email\" value=\"\" />\r\n            </div>\r\n            <div>\r\n                <input type=\"submit\" name =\"SubmitButton\" value={'Submit'|i18n( 'example' )} />\r\n                <input type=\"submit\" name =\"DiscardButton\" value={'Discard'|i18n( 'example' )} />\r\n            </div>\r\n        </form>\r\n\r\n3. Implement class myFormView\r\n\r\n    extension/myextension/classes/myformview.php\r\n\r\n        <?php\r\n        class myFormView implements xNodeviewRender\r\n        {\r\n         /**\r\n          * This method is invoked before template is fetched.\r\n          *\r\n          * Typical usage:\r\n          * 1. Set php variable to template directly instead of use eZ custom operator in template\r\n          * 2. Customize http form action\r\n          *\r\n          */\r\n          public function initNodeview( $module, $node, $tpl, $viewMode )\r\n          {\r\n               // Disable view cache for this page, since the form will be dynamic\r\n               $tpl->setVariable( 'cache_ttl', 0 );\r\n\r\n               $http = eZHTTPTool::instance();\r\n               if( $http->hasVariable( 'SubmitButton' ) )\r\n               {\r\n                    // Show result if the form submit\r\n                    $name = $http->variable( 'name' );\r\n                    $email = $http->variable( 'email' );\r\n                    $tpl->setVariable( 'result', ezpI18n::tr( 'example', \"You inputed Name: %1, Email %2\", '', array( $name, $email )  ) );\r\n               }\r\n                else if( $http->hasVariable( 'DiscardButton' ) )\r\n                {\r\n                    // Redirect to homepage if the form is discarded.\r\n                    $module->redirectTo( '/' );\r\n                }\r\n\r\n          }\r\n        }\r\n        ?>\r\n\r\n4. Regenerated autoload array for extension\r\n<php path> bin/php/ezpgenerateautoloads.php -e\r\n\r\n5. Clear cache before viewing the page(content/view/full/50).\r\n\r\nFAQ\r\n---------\r\n1. Is the business logic inside view cache?\r\n\r\n   Yes, for first visit eZ will invoke the business logic and generate view cache, for second visit it may skip business logic and load view cache only if the view cache keys are not changed.\r\n\r\n   Because of that, for high dynamic page(like form), it's recommanded to disable view cache from php: \r\n   \r\n         public function initNodeview( $module, $node, $tpl, $viewMode )\r\n         {\r\n             $tpl->setVariable( 'cache_ttl', 0 );\r\n\r\n\r\nRoadmap\r\n--------\r\nShould\r\n\r\n- Support override rules hierarchy\r\n\r\nCould\r\n\r\n- Control cache via persistant variable/cache block keys\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}